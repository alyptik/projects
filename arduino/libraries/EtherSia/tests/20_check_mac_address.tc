#include "Arduino.h"

#include "MACAddress.h"
#suite MACAddress

const uint8_t zero[6] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#test new_MACAddress
MACAddress addr;
ck_assert_mem_eq(zero, addr, 6);


#test new_MACAddress_six_uint8
MACAddress addr(0x01, 0x02, 0x03, 0x04, 0x05, 0x06);
ck_assert(addr[0] == 0x01);
ck_assert(addr[1] == 0x02);
ck_assert(addr[2] == 0x03);
ck_assert(addr[3] == 0x04);
ck_assert(addr[4] == 0x05);
ck_assert(addr[5] == 0x06);


#test new_MACAddress_byte_array
byte array[6] = {0x4e, 0x27, 0xb0, 0xbe, 0x69, 0x24};
MACAddress addr(array);
ck_assert_mem_eq(array, addr, 6);


#test new_MACAddress_string
uint8_t test[] = {0x4e, 0x27, 0xb0, 0xbe, 0x69, 0x24};
MACAddress addr("4e:27:b0:be:69:24");
ck_assert_mem_eq(test, addr, 6);


#test fromString
uint8_t test[] = {0x6a, 0x06, 0xed, 0x54, 0x7f, 0xd1};
MACAddress addr;
ck_assert(addr.fromString("6a:06:ed:54:7f:d1") == true);
ck_assert_mem_eq(test, addr, 6);


#test fromString_dash
uint8_t test[] = {0x6a, 0x06, 0xed, 0x54, 0x7f, 0xd1};
MACAddress addr;
ck_assert(addr.fromString("6a-06-ed-54-7f-d1") == true);
ck_assert_mem_eq(test, addr, 6);


#test fromString_invalid_nonhex
MACAddress addr;
ck_assert(addr.fromString("6a:xx:xx:xx:xx:d1") == false);


#test fromString_invalid_no_separator
MACAddress addr;
ck_assert(addr.fromString("6a06ed547fd1") == false);


#test fromString_invalid_empty
MACAddress addr;
ck_assert(addr.fromString("") == false);


#test fromString_invalid_foobar
MACAddress addr;
ck_assert(addr.fromString("foobar") == false);


#test setIPv6Multicast
uint8_t v6addr[] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
uint8_t test[] = {0x33, 0x33, 0x00, 0x00, 0x88, 0x88};
MACAddress addr;
addr.setIPv6Multicast(v6addr);
ck_assert_mem_eq(test, addr, 6);

#test print
Buffer buffer;
MACAddress addr("4e:27:b0:be:69:24");
addr.print(buffer);
ck_assert_str_eq(buffer, "4e:27:b0:be:69:24");

#test print_single_digit
Buffer buffer;
MACAddress addr("4e:27:b0:01:02:03");
addr.print(buffer);
ck_assert_str_eq(buffer, "4e:27:b0:01:02:03");

#test println
Buffer buffer;
MACAddress addr("4e:27:b0:be:69:24");
addr.println(buffer);
ck_assert_str_eq(buffer, "4e:27:b0:be:69:24\r\n");
