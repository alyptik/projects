#include "Arduino.h"
#include "EtherSia.h"
#include "hext.hh"
#include "util.h"

class CustomTFTPServer: public TFTPServer {

public:
    CustomTFTPServer(EtherSia &ether) : TFTPServer(ether) {};

    int8_t openFile(const char* /*filename*/)
    {
        return -1;
    }

    void writeBytes(int8_t /*fileno*/, uint16_t /*block*/, const uint8_t* /*data*/, uint16_t /*len*/)
    {

    }

    int16_t readBytes(int8_t /*fileno*/, uint16_t /*block*/, uint8_t* /*data*/)
    {
        return 0;
    }

};


#suite TFTP Server

#test construct_defaults
EtherSia_Dummy ether;
CustomTFTPServer tftp(ether);
ck_assert_int_eq(tftp.localPort(), 69);

#test invalid_operation
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

CustomTFTPServer tftp(ether);
HextFile tftp_invalid_op("packets/udp_tftp_invalid_op.hext");
ether.injectRecievedPacket(tftp_invalid_op.buffer, tftp_invalid_op.length);
ck_assert_int_eq(ether.receivePacket(), tftp_invalid_op.length);
tftp.handleRequest();

HextFile expect("packets/udp_tftp_reply_invalid_op.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();
