#include "Arduino.h"
#include "hext.hh"
#include "dns.h"

#suite DNS


#test dnsMakeRequest_ipv6_aelius
HextFile expected("packets/dns_req_aelius.hext");
uint8_t buffer[256];
uint16_t len = dnsMakeRequest(buffer, "ipv6.aelius.com", 0x1234);
ck_assert_int_eq(len, expected.length);
ck_assert_mem_eq(buffer, expected.buffer, expected.length);


#test dnsProcessReply_ipv6_aelius
HextFile response("packets/dns_res_aelius.hext");
IPv6Address expect("2001:41c8:0051:07cf:0000:0000:0000:0006");

IPv6Address *addr = dnsProcessReply(response.buffer, response.length, 0x1234);
ck_assert_ptr_ne(addr, NULL);
ck_assert_mem_eq(expect, addr, sizeof(expect));


#test dnsProcessReply_id_mismatch
HextFile response("packets/dns_res_aelius.hext");
IPv6Address *addr = dnsProcessReply(response.buffer, response.length, 0xFFFF);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_error_code
HextFile response("packets/dns_res_error.hext");
IPv6Address *addr = dnsProcessReply(response.buffer, response.length, 0x2a45);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_truncated_query
HextFile response("packets/dns_res_aelius.hext");
IPv6Address *addr = dnsProcessReply(response.buffer, 24, 0x1234);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_no_AAAA
HextFile response("packets/dns_res_no_aaaa.hext");
IPv6Address *addr = dnsProcessReply(response.buffer, response.length, 0xe010);
ck_assert_ptr_eq(addr, NULL);


#test dnsProcessReply_with_cnames
HextFile response("packets/dns_res_long.hext");
IPv6Address expect("2a02:26f0:5d:2a8::1aca");
IPv6Address *addr = dnsProcessReply(response.buffer, response.length, 0xbb91);
ck_assert_ptr_ne(addr, NULL);
ck_assert_mem_eq(expect, addr, sizeof(expect));


#test dnsProcessReply_truncated_response
HextFile response("packets/dns_res_long.hext");
IPv6Address *addr = dnsProcessReply(response.buffer, 128, 0xbb91);
ck_assert_ptr_eq(addr, NULL);

